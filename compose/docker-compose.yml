version: '3'
name: tse_repo

secrets:
  mysql_root_password:
    file: ./secrets/mysql_root_password
  mysql_password:
    file: ./secrets/mysql_password
    
services:
  mysql-master:
    image: mysql:8.0.34
    container_name: mysql-master
    restart: unless-stopped
    ports:
      - "3306:3306"
    volumes:
      - master-data:/var/lib/mysql
      - master-data-cnf:/etc/mysql/conf.d
      - ./master/setup.sql:/docker-entrypoint-initdb.d/setup.sql
    env_file: 
      - ./master/.env.mysql
    environment:
      - MYSQL_ROOT_PASSWORD_FILE=/run/secrets/mysql_root_password
      - MYSQL_PASSWORD_FILE=/run/secrets/mysql_password
    secrets:
      - mysql_root_password
      - mysql_password
    networks:
      db_network:
        aliases:
          - mysql

  mysql-backup:
    image: fradelg/mysql-cron-backup:1.13.1
    container_name: mysql-backup
    depends_on:
      - mysql-master
    restart: unless-stopped
    volumes:
      - ${BACKUPS_FOLDER}:/backup
    env_file: 
      - ./master/.env.mysql
    environment:
      - MYSQL_PASS_FILE=/run/secrets/mysql_password
      - CRON_TIME=0 0 * * *
      - MYSQL_HOST=mysql-master
      - MYSQL_PORT=3306
      - TIMEOUT=10s
      - INIT_BACKUP=1
    secrets:
      - mysql_password
    networks:
      db_network:

  # Before running this docker compose you should build the needed volume for sshproxy
  # docker container run --name ssha --rm -it -v tse_repo_sshproxy_config:/python/config  amirstm/sshproxy_admin
  sshproxy:
    image: amirstm/sshproxy_main:latest
    container_name: sshproxy
    restart: unless-stopped
    ports:
      - "${PROXY_PORT}:${PROXY_PORT}"
    volumes:
      - sshproxy_config:/python/config
    networks:
      app_network:
        aliases:
          - sshproxy

  operations:
    image: amirstm/tse-repo-operations
    container_name: operations
    depends_on:
      - sshproxy
    restart: unless-stopped
    environment:
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_CHAT_ID=${TELEGRAM_CHAT_ID}
      - PROXY_URL=socks5://sshproxy:${PROXY_PORT}
    networks:
      app_network:
        aliases:
          - operations

volumes:
  master-data:
  master-data-cnf:
  sshproxy_config:

networks:
  db_network:
    internal: false # change this to true later for deployment
  app_network:
    internal: false
  
